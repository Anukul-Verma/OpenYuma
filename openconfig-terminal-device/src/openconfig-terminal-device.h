
#ifndef _H_openconfig_terminal_device
#define _H_openconfig_terminal_device
/* 
 * Copyright (c) 2008-2012, Andy Bierman, All Rights Reserved.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *

*** Generated by yangdump 2.5-5

    Combined SIL header
    module openconfig-terminal-device
    revision 2017-07-08
    namespace http://openconfig.net/yang/terminal-device
    organization OpenConfig working group

 */

#include <xmlstring.h>

#include "dlq.h"
#include "ncxtypes.h"
#include "op.h"
#include "status.h"
#include "val.h"

#ifdef __cplusplus
extern "C" {
#endif

#define y_openconfig_terminal_device_M_openconfig_terminal_device (const xmlChar *)"openconfig-terminal-device"
#define y_openconfig_terminal_device_R_openconfig_terminal_device (const xmlChar *)"2017-07-08"

#define y_openconfig_terminal_device_N_admin_state (const xmlChar *)"admin-state"
#define y_openconfig_terminal_device_N_allocation (const xmlChar *)"allocation"
#define y_openconfig_terminal_device_N_assignment (const xmlChar *)"assignment"
#define y_openconfig_terminal_device_N_assignment_type (const xmlChar *)"assignment-type"
#define y_openconfig_terminal_device_N_avg (const xmlChar *)"avg"
#define y_openconfig_terminal_device_N_background_block_errors (const xmlChar *)"background-block-errors"
#define y_openconfig_terminal_device_N_channel (const xmlChar *)"channel"
#define y_openconfig_terminal_device_N_code_violations (const xmlChar *)"code-violations"
#define y_openconfig_terminal_device_N_config (const xmlChar *)"config"
#define y_openconfig_terminal_device_N_description (const xmlChar *)"description"
#define y_openconfig_terminal_device_N_errored_seconds (const xmlChar *)"errored-seconds"
#define y_openconfig_terminal_device_N_esnr (const xmlChar *)"esnr"
#define y_openconfig_terminal_device_N_ethernet (const xmlChar *)"ethernet"
#define y_openconfig_terminal_device_N_fec_corrected_bits (const xmlChar *)"fec-corrected-bits"
#define y_openconfig_terminal_device_N_fec_corrected_bytes (const xmlChar *)"fec-corrected-bytes"
#define y_openconfig_terminal_device_N_fec_uncorrectable_words (const xmlChar *)"fec-uncorrectable-words"
#define y_openconfig_terminal_device_N_in_8021q_frames (const xmlChar *)"in-8021q-frames"
#define y_openconfig_terminal_device_N_in_crc_errors (const xmlChar *)"in-crc-errors"
#define y_openconfig_terminal_device_N_in_fragment_frames (const xmlChar *)"in-fragment-frames"
#define y_openconfig_terminal_device_N_in_jabber_frames (const xmlChar *)"in-jabber-frames"
#define y_openconfig_terminal_device_N_in_mac_control_frames (const xmlChar *)"in-mac-control-frames"
#define y_openconfig_terminal_device_N_in_mac_pause_frames (const xmlChar *)"in-mac-pause-frames"
#define y_openconfig_terminal_device_N_in_oversize_frames (const xmlChar *)"in-oversize-frames"
#define y_openconfig_terminal_device_N_index (const xmlChar *)"index"
#define y_openconfig_terminal_device_N_ingress (const xmlChar *)"ingress"
#define y_openconfig_terminal_device_N_instant (const xmlChar *)"instant"
#define y_openconfig_terminal_device_N_interval (const xmlChar *)"interval"
#define y_openconfig_terminal_device_N_link_state (const xmlChar *)"link-state"
#define y_openconfig_terminal_device_N_logical_channel (const xmlChar *)"logical-channel"
#define y_openconfig_terminal_device_N_logical_channel_assignments (const xmlChar *)"logical-channel-assignments"
#define y_openconfig_terminal_device_N_logical_channel_type (const xmlChar *)"logical-channel-type"
#define y_openconfig_terminal_device_N_logical_channels (const xmlChar *)"logical-channels"
#define y_openconfig_terminal_device_N_loopback_mode (const xmlChar *)"loopback-mode"
#define y_openconfig_terminal_device_N_max (const xmlChar *)"max"
#define y_openconfig_terminal_device_N_max_time (const xmlChar *)"max-time"
#define y_openconfig_terminal_device_N_min (const xmlChar *)"min"
#define y_openconfig_terminal_device_N_min_time (const xmlChar *)"min-time"
#define y_openconfig_terminal_device_N_mode (const xmlChar *)"mode"
#define y_openconfig_terminal_device_N_mode_id (const xmlChar *)"mode-id"
#define y_openconfig_terminal_device_N_operational_modes (const xmlChar *)"operational-modes"
#define y_openconfig_terminal_device_N_optical_channel (const xmlChar *)"optical-channel"
#define y_openconfig_terminal_device_N_otn (const xmlChar *)"otn"
#define y_openconfig_terminal_device_N_out_8021q_frames (const xmlChar *)"out-8021q-frames"
#define y_openconfig_terminal_device_N_out_mac_control_frames (const xmlChar *)"out-mac-control-frames"
#define y_openconfig_terminal_device_N_out_mac_pause_frames (const xmlChar *)"out-mac-pause-frames"
#define y_openconfig_terminal_device_N_physical_channel (const xmlChar *)"physical-channel"
#define y_openconfig_terminal_device_N_post_fec_ber (const xmlChar *)"post-fec-ber"
#define y_openconfig_terminal_device_N_pre_fec_ber (const xmlChar *)"pre-fec-ber"
#define y_openconfig_terminal_device_N_q_value (const xmlChar *)"q-value"
#define y_openconfig_terminal_device_N_rate_class (const xmlChar *)"rate-class"
#define y_openconfig_terminal_device_N_rdi_msg (const xmlChar *)"rdi-msg"
#define y_openconfig_terminal_device_N_severely_errored_seconds (const xmlChar *)"severely-errored-seconds"
#define y_openconfig_terminal_device_N_state (const xmlChar *)"state"
#define y_openconfig_terminal_device_N_terminal_device (const xmlChar *)"terminal-device"
#define y_openconfig_terminal_device_N_test_signal (const xmlChar *)"test-signal"
#define y_openconfig_terminal_device_N_transceiver (const xmlChar *)"transceiver"
#define y_openconfig_terminal_device_N_trib_protocol (const xmlChar *)"trib-protocol"
#define y_openconfig_terminal_device_N_tti_msg_auto (const xmlChar *)"tti-msg-auto"
#define y_openconfig_terminal_device_N_tti_msg_expected (const xmlChar *)"tti-msg-expected"
#define y_openconfig_terminal_device_N_tti_msg_recv (const xmlChar *)"tti-msg-recv"
#define y_openconfig_terminal_device_N_tti_msg_transmit (const xmlChar *)"tti-msg-transmit"
#define y_openconfig_terminal_device_N_unavailable_seconds (const xmlChar *)"unavailable-seconds"
#define y_openconfig_terminal_device_N_vendor_id (const xmlChar *)"vendor-id"

/* container /terminal-device/config */
typedef struct y_openconfig_terminal_device_T_terminal_device_config_ {
} y_openconfig_terminal_device_T_terminal_device_config;

/* container /terminal-device/state */
typedef struct y_openconfig_terminal_device_T_terminal_device_state_ {
} y_openconfig_terminal_device_T_terminal_device_state;

/* container /terminal-device/logical-channels/channel/config */
typedef struct y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_config_ {
    uint32 index;
    xmlChar *description;
    xmlChar *admin_state;
    val_idref_t *rate_class;
    val_idref_t *trib_protocol;
    val_idref_t *logical_channel_type;
    xmlChar *loopback_mode;
    boolean test_signal;
} y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_config;

/* container /terminal-device/logical-channels/channel/state */
typedef struct y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_state_ {
    uint32 index;
    xmlChar *description;
    xmlChar *admin_state;
    val_idref_t *rate_class;
    val_idref_t *trib_protocol;
    val_idref_t *logical_channel_type;
    xmlChar *loopback_mode;
    boolean test_signal;
    xmlChar *link_state;
} y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_state;

/* container /terminal-device/logical-channels/channel/otn/config */
typedef struct y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_otn_config_ {
    xmlChar *tti_msg_transmit;
    xmlChar *tti_msg_expected;
    boolean tti_msg_auto;
} y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_otn_config;

/* container /terminal-device/logical-channels/channel/otn/state/pre-fec-ber */
typedef struct y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_otn_state_pre_fec_ber_ {
    int64 instant;
    int64 avg;
    int64 min;
    int64 max;
    uint64 interval;
    uint64 min_time;
    uint64 max_time;
} y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_otn_state_pre_fec_ber;

/* container /terminal-device/logical-channels/channel/otn/state/post-fec-ber */
typedef struct y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_otn_state_post_fec_ber_ {
    int64 instant;
    int64 avg;
    int64 min;
    int64 max;
    uint64 interval;
    uint64 min_time;
    uint64 max_time;
} y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_otn_state_post_fec_ber;

/* container /terminal-device/logical-channels/channel/otn/state/q-value */
typedef struct y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_otn_state_q_value_ {
    int64 instant;
    int64 avg;
    int64 min;
    int64 max;
    uint64 interval;
    uint64 min_time;
    uint64 max_time;
} y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_otn_state_q_value;

/* container /terminal-device/logical-channels/channel/otn/state/esnr */
typedef struct y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_otn_state_esnr_ {
    int64 instant;
    int64 avg;
    int64 min;
    int64 max;
    uint64 interval;
    uint64 min_time;
    uint64 max_time;
} y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_otn_state_esnr;

/* container /terminal-device/logical-channels/channel/otn/state */
typedef struct y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_otn_state_ {
    xmlChar *tti_msg_transmit;
    xmlChar *tti_msg_expected;
    boolean tti_msg_auto;
    xmlChar *tti_msg_recv;
    xmlChar *rdi_msg;
    uint64 errored_seconds;
    uint64 severely_errored_seconds;
    uint64 unavailable_seconds;
    uint64 code_violations;
    uint64 fec_uncorrectable_words;
    uint64 fec_corrected_bytes;
    uint64 fec_corrected_bits;
    uint64 background_block_errors;
    y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_otn_state_pre_fec_ber pre_fec_ber;
    y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_otn_state_post_fec_ber post_fec_ber;
    y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_otn_state_q_value q_value;
    y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_otn_state_esnr esnr;
} y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_otn_state;

/* container /terminal-device/logical-channels/channel/otn */
typedef struct y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_otn_ {
    y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_otn_config config;
    y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_otn_state state;
} y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_otn;

/* container /terminal-device/logical-channels/channel/ethernet/config */
typedef struct y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_ethernet_config_ {
} y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_ethernet_config;

/* container /terminal-device/logical-channels/channel/ethernet/state */
typedef struct y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_ethernet_state_ {
    uint64 in_mac_control_frames;
    uint64 in_mac_pause_frames;
    uint64 in_oversize_frames;
    uint64 in_jabber_frames;
    uint64 in_fragment_frames;
    uint64 in_8021q_frames;
    uint64 in_crc_errors;
    uint64 out_mac_control_frames;
    uint64 out_mac_pause_frames;
    uint64 out_8021q_frames;
} y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_ethernet_state;

/* container /terminal-device/logical-channels/channel/ethernet */
typedef struct y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_ethernet_ {
    y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_ethernet_config config;
    y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_ethernet_state state;
} y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_ethernet;

/* leaf-list /terminal-device/logical-channels/channel/ingress/config/physical-channel */
typedef struct y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_ingress_config_physical_channel_ {
    dlq_hdr_t qhdr;
    xmlChar *physical_channel;
} y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_ingress_config_physical_channel;

/* container /terminal-device/logical-channels/channel/ingress/config */
typedef struct y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_ingress_config_ {
    xmlChar *transceiver;
    dlq_hdr_t physical_channel;
} y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_ingress_config;

/* leaf-list /terminal-device/logical-channels/channel/ingress/state/physical-channel */
typedef struct y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_ingress_state_physical_channel_ {
    dlq_hdr_t qhdr;
    xmlChar *physical_channel;
} y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_ingress_state_physical_channel;

/* container /terminal-device/logical-channels/channel/ingress/state */
typedef struct y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_ingress_state_ {
    xmlChar *transceiver;
    dlq_hdr_t physical_channel;
} y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_ingress_state;

/* container /terminal-device/logical-channels/channel/ingress */
typedef struct y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_ingress_ {
    y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_ingress_config config;
    y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_ingress_state state;
} y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_ingress;

/* container /terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config */
typedef struct y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_logical_channel_assignments_assignment_config_ {
    uint32 index;
    xmlChar *description;
    xmlChar *assignment_type;
    uint32 logical_channel;
    xmlChar *optical_channel;
    int64 allocation;
} y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_logical_channel_assignments_assignment_config;

/* container /terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state */
typedef struct y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_logical_channel_assignments_assignment_state_ {
    uint32 index;
    xmlChar *description;
    xmlChar *assignment_type;
    uint32 logical_channel;
    xmlChar *optical_channel;
    int64 allocation;
} y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_logical_channel_assignments_assignment_state;

/* list /terminal-device/logical-channels/channel/logical-channel-assignments/assignment */
typedef struct y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_logical_channel_assignments_assignment_ {
    dlq_hdr_t qhdr;
    xmlChar *index;
    y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_logical_channel_assignments_assignment_config config;
    y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_logical_channel_assignments_assignment_state state;
} y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_logical_channel_assignments_assignment;

/* container /terminal-device/logical-channels/channel/logical-channel-assignments */
typedef struct y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_logical_channel_assignments_ {
    dlq_hdr_t assignment;
} y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_logical_channel_assignments;

/* list /terminal-device/logical-channels/channel */
typedef struct y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_ {
    dlq_hdr_t qhdr;
    xmlChar *index;
    y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_config config;
    y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_state state;
    y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_otn otn;
    y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_ethernet ethernet;
    y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_ingress ingress;
    y_openconfig_terminal_device_T_terminal_device_logical_channels_channel_logical_channel_assignments logical_channel_assignments;
} y_openconfig_terminal_device_T_terminal_device_logical_channels_channel;

/* container /terminal-device/logical-channels */
typedef struct y_openconfig_terminal_device_T_terminal_device_logical_channels_ {
    dlq_hdr_t channel;
} y_openconfig_terminal_device_T_terminal_device_logical_channels;

/* container /terminal-device/operational-modes/mode/config */
typedef struct y_openconfig_terminal_device_T_terminal_device_operational_modes_mode_config_ {
} y_openconfig_terminal_device_T_terminal_device_operational_modes_mode_config;

/* container /terminal-device/operational-modes/mode/state */
typedef struct y_openconfig_terminal_device_T_terminal_device_operational_modes_mode_state_ {
    uint16 mode_id;
    xmlChar *description;
    xmlChar *vendor_id;
} y_openconfig_terminal_device_T_terminal_device_operational_modes_mode_state;

/* list /terminal-device/operational-modes/mode */
typedef struct y_openconfig_terminal_device_T_terminal_device_operational_modes_mode_ {
    dlq_hdr_t qhdr;
    xmlChar *mode_id;
    y_openconfig_terminal_device_T_terminal_device_operational_modes_mode_config config;
    y_openconfig_terminal_device_T_terminal_device_operational_modes_mode_state state;
} y_openconfig_terminal_device_T_terminal_device_operational_modes_mode;

/* container /terminal-device/operational-modes */
typedef struct y_openconfig_terminal_device_T_terminal_device_operational_modes_ {
    dlq_hdr_t mode;
} y_openconfig_terminal_device_T_terminal_device_operational_modes;

/* container /terminal-device */
typedef struct y_openconfig_terminal_device_T_terminal_device_ {
    y_openconfig_terminal_device_T_terminal_device_config config;
    y_openconfig_terminal_device_T_terminal_device_state state;
    y_openconfig_terminal_device_T_terminal_device_logical_channels logical_channels;
    y_openconfig_terminal_device_T_terminal_device_operational_modes operational_modes;
} y_openconfig_terminal_device_T_terminal_device;
/********************************************************************
* FUNCTION y_openconfig_terminal_device_init
* 
* initialize the openconfig-terminal-device server instrumentation library
* 
* INPUTS:
*    modname == requested module name
*    revision == requested version (NULL for any)
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t y_openconfig_terminal_device_init (
    const xmlChar *modname,
    const xmlChar *revision);

/********************************************************************
* FUNCTION y_openconfig_terminal_device_init2
* 
* SIL init phase 2: non-config data structures
* Called after running config is loaded
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t y_openconfig_terminal_device_init2 (void);

/********************************************************************
* FUNCTION y_openconfig_terminal_device_cleanup
*    cleanup the server instrumentation library
* 
********************************************************************/
extern void y_openconfig_terminal_device_cleanup (void);

#ifdef __cplusplus
} /* end extern 'C' */
#endif

#endif